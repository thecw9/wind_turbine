version: "3"

services:
  kafka:
    image: "bitnami/kafka:latest"
    container_name: sensor_service_kafka
    # volumes:
    #   - "kafka_data:/bitnami"
    restart: always
    environment:
      - TZ=Asia/Shanghai
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://127.0.0.1:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    ports:
      - "9092:9092"
      - "9094:9094"

  produce:
    container_name: sensor_service_produce
    build:
      context: .
      dockerfile: Dockerfile.produce
    restart: always
    environment:
      TZ: Asia/Shanghai
    devices:
      - "/dev/snd:/dev/snd"
    volumes:
      - .:/app
    depends_on:
      - kafka
    extra_hosts:
      - "host.docker.internal:host-gateway"

  store:
    container_name: sensor_service_store
    build:
      context: .
      dockerfile: Dockerfile.store
    restart: always
    environment:
      TZ: Asia/Shanghai
    devices:
      - "/dev/snd:/dev/snd"
    volumes:
      - store_data:/app/data
    depends_on:
      - kafka
    extra_hosts:
      - "host.docker.internal:host-gateway"

  http_service:
    container_name: sensor_service_http_service
    build:
      context: .
      dockerfile: Dockerfile.http_service
    restart: always
    environment:
      TZ: Asia/Shanghai
    volumes:
      - .:/app
    depends_on:
      - kafka
    ports:
      - "8003:8000"
    # healthcheck:
    #   test: ["CMD", "curl", "--fail", "http://localhost:8000/docs"]
    #   interval: 5s
    #   timeout: 10s
    #   retries: 50
    extra_hosts:
      - "host.docker.internal:host-gateway"

volumes:
  kafka_data:
    driver: local
  store_data:
    driver: local
